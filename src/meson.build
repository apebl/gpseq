sources = files(
	'atomic.c',
	'overflow.c',
	'ArrayBuffer.vala',
	'ArrayBufferSpliterator.vala',
	'ArraySpliterator.vala',
	'AtomicBoolRef.vala',
	'AtomicInt64Ref.vala',
	'AtomicObjectRef.vala',
	'CollectTask.vala',
	'Collector.vala',
	'CollectorFeatures.vala',
	'Collectors.vala',
	'CombineFunc.vala',
	'Comparator.vala',
	'ConcatArrayBuffer.vala',
	'Consumer.vala',
	'Container.vala',
	'DefaultContainer.vala',
	'DefaultQueueBalancer.vala',
	'DefaultSupplier.vala',
	'DefaultTaskEnv.vala',
	'DistinctContainer.vala',
	'EachChunkFunc.vala',
	'EmptySpliterator.vala',
	'Executor.vala',
	'FilteredContainer.vala',
	'FindTask.vala',
	'FlatMapFunc.vala',
	'FlatMappedContainer.vala',
	'FoldFunc.vala',
	'FoldTask.vala',
	'ForEachTask.vala',
	'ForkJoinTask.vala',
	'Func.vala',
	'FuncTask.vala',
	'Future.vala',
	'GenericArraySpliterator.vala',
	'Gpseq.vala',
	'IterateIterator.vala',
	'IteratorSpliterator.vala',
	'LightMapFuture.vala',
	'ListSpliterator.vala',
	'MapErrorFunc.vala',
	'MapFunc.vala',
	'MappedContainer.vala',
	'MatchTask.vala',
	'Optional.vala',
	'OptionalError.vala',
	'OrderedSliceTask.vala',
	'Overflow.vala',
	'Predicate.vala',
	'Promise.vala',
	'QueueBalancer.vala',
	'ReduceTask.vala',
	'ResultIterator.vala',
	'ResultSpliterator.vala',
	'Seq.vala',
	'SequentialSliceSpliterator.vala',
	'SliceContainer.vala',
	'SortTask.vala',
	'SortedContainer.vala',
	'Spliterator.vala',
	'SpliteratorTask.vala',
	'SubArray.vala',
	'SubArraySpliterator.vala',
	'Supplier.vala',
	'SupplierSpliterator.vala',
	'SupplyFunc.vala',
	'Task.vala',
	'TaskEnv.vala',
	'TaskFunc.vala',
	'TeeMergeFunc.vala',
	'ThreadFactory.vala',
	'TimSort.vala',
	'UnorderedSliceSpliterator.vala',
	'VoidFunc.vala',
	'VoidTaskFunc.vala',
	'WorkQueue.vala',
	'WorkerContext.vala',
	'WorkerPool.vala',
	'WorkerThread.vala',
	'Wrapper.vala',
	'collectors/AverageDoubleCollector.vala',
	'collectors/AverageFloatCollector.vala',
	'collectors/CollectionCollector.vala',
	'collectors/FilterCollector.vala',
	'collectors/FoldCollector.vala',
	'collectors/GenericArrayCollector.vala',
	'collectors/GroupByCollector.vala',
	'collectors/JoinCollector.vala',
	'collectors/MapCollector.vala',
	'collectors/MappingCollector.vala',
	'collectors/PartitionCollector.vala',
	'collectors/ReduceCollector.vala',
	'collectors/SumDoubleCollector.vala',
	'collectors/SumFloatCollector.vala',
	'collectors/SumInt32Collector.vala',
	'collectors/SumInt64Collector.vala',
	'collectors/SumIntCollector.vala',
	'collectors/SumLongCollector.vala',
	'collectors/SumUint32Collector.vala',
	'collectors/SumUint64Collector.vala',
	'collectors/SumUintCollector.vala',
	'collectors/SumUlongCollector.vala',
	'collectors/TeeCollector.vala',
	'collectors/WrapCollector.vala'
)

c_args = []

if get_option('have_atomic_int64_lock_free')
	c_args += '-DGPSEQ_ATOMIC_INT64_LOCK_FREE'
endif

gpseq_lib = library(libname, sources,
	vala_header: meson.project_name() + '.h',
	vala_gir: Libname + '.gir',
	dependencies: dependencies,
	install: true,
	install_dir: [true, get_option('includedir') / libname, true, true],
	vala_args: vala_args,
	c_args: c_args)

gpseq_dep = declare_dependency(link_with: gpseq_lib,
	include_directories: include_directories('.'))

pkg = import('pkgconfig')
pkg.generate(libraries: gpseq_lib,
	version: meson.project_version(),
	name: meson.project_name(),
	filebase: libname,
	description: project_desc,
	subdirs: libname)

if get_option('typelib')
	g_ir_compiler = find_program('g-ir-compiler')
	typelib_cmd = [g_ir_compiler,
		'--shared-library=' + gpseq_lib.full_path().split('/')[-1],
		'--output=@OUTPUT@',
		meson.current_build_dir() / (Libname + '.gir')
	]
	custom_target('typelib', command: typelib_cmd,
		output: Libname + '.typelib',
		depends: gpseq_lib,
		install: true,
		install_dir: get_option('libdir') / 'girepository-1.0')
endif
